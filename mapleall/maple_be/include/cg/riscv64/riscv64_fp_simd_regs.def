/*
 * Copyright (c) [2020] Huawei Technologies Co.,Ltd.All rights reserved.
 *
 * OpenArkCompiler is licensed under the Mulan Permissive Software License v2.
 * You can use this software according to the terms and conditions of the MulanPSL - 2.0.
 * You may obtain a copy of MulanPSL - 2.0 at:
 *
 *   https://opensource.org/licenses/MulanPSL-2.0
 *
 * THIS SOFTWARE IS PROVIDED ON AN "AS IS" BASIS, WITHOUT WARRANTIES OF ANY KIND, EITHER
 * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO NON-INFRINGEMENT, MERCHANTABILITY OR
 * FIT FOR A PARTICULAR PURPOSE.
 * See the MulanPSL - 2.0 for more details.
 */

/*
  ARM Compiler armasm User Guide version 6.6.
  http://infocenter.arm.com/help/index.jsp?topic=/com.arm.doc.dui0473j/deb1353594352617.html
  (retrieved on 3/24/2017)
 */
// ID, 128 bit vector prefix, followed by scalar prefixes
// scalar prefixes: 8-bit, 16-bit, 32-bit, 64-bit, 128-bit
// (e.g., we use D0 when V0 contains a 64-bit scalar FP number (aka, double))
FP_SIMD_REG(0 , "V", "B", "H", "S", "D", "Q")
FP_SIMD_REG(1 , "V", "B", "H", "S", "D", "Q")
FP_SIMD_REG(2 , "V", "B", "H", "S", "D", "Q")
FP_SIMD_REG(3 , "V", "B", "H", "S", "D", "Q")
FP_SIMD_REG(4 , "V", "B", "H", "S", "D", "Q")
FP_SIMD_REG(5 , "V", "B", "H", "S", "D", "Q")
FP_SIMD_REG(6 , "V", "B", "H", "S", "D", "Q")
FP_SIMD_REG(7 , "V", "B", "H", "S", "D", "Q")
FP_SIMD_REG(8 , "V", "B", "H", "S", "D", "Q")
FP_SIMD_REG(9 , "V", "B", "H", "S", "D", "Q")
FP_SIMD_REG(10, "V", "B", "H", "S", "D", "Q")
FP_SIMD_REG(11, "V", "B", "H", "S", "D", "Q")
FP_SIMD_REG(12, "V", "B", "H", "S", "D", "Q")
FP_SIMD_REG(13, "V", "B", "H", "S", "D", "Q")
FP_SIMD_REG(14, "V", "B", "H", "S", "D", "Q")
FP_SIMD_REG(15, "V", "B", "H", "S", "D", "Q")
FP_SIMD_REG(16, "V", "B", "H", "S", "D", "Q")
FP_SIMD_REG(17, "V", "B", "H", "S", "D", "Q")
FP_SIMD_REG(18, "V", "B", "H", "S", "D", "Q")
FP_SIMD_REG(19, "V", "B", "H", "S", "D", "Q")
FP_SIMD_REG(20, "V", "B", "H", "S", "D", "Q")
FP_SIMD_REG(21, "V", "B", "H", "S", "D", "Q")
FP_SIMD_REG(22, "V", "B", "H", "S", "D", "Q")
FP_SIMD_REG(23, "V", "B", "H", "S", "D", "Q")
FP_SIMD_REG(24, "V", "B", "H", "S", "D", "Q")
FP_SIMD_REG(25, "V", "B", "H", "S", "D", "Q")
FP_SIMD_REG(26, "V", "B", "H", "S", "D", "Q")
FP_SIMD_REG(27, "V", "B", "H", "S", "D", "Q")
FP_SIMD_REG(28, "V", "B", "H", "S", "D", "Q")
FP_SIMD_REG(29, "V", "B", "H", "S", "D", "Q")
FP_SIMD_REG(30, "V", "B", "H", "S", "D", "Q")
FP_SIMD_REG(31, "V", "B", "H", "S", "D", "Q")

FP_SIMD_EXT_BASE(32)

// The following 32 simd are only used for differentiating
// regular 64 bit V# or upper/lower 32 bit V#.
// This is to bypass postebo which cannot distinguish between
// v#.s[0] and v#.s[1].  So creating this the same v# can
// be represented with v# and v(#+32), but are just the
// upper and lower part of the same v#.
FP_SIMD_EXT(32 , "V", "B", "H", "S", "D", "Q")
FP_SIMD_EXT(33 , "V", "B", "H", "S", "D", "Q")
FP_SIMD_EXT(34 , "V", "B", "H", "S", "D", "Q")
FP_SIMD_EXT(35 , "V", "B", "H", "S", "D", "Q")
FP_SIMD_EXT(36 , "V", "B", "H", "S", "D", "Q")
FP_SIMD_EXT(37 , "V", "B", "H", "S", "D", "Q")
FP_SIMD_EXT(38 , "V", "B", "H", "S", "D", "Q")
FP_SIMD_EXT(39 , "V", "B", "H", "S", "D", "Q")
FP_SIMD_EXT(40 , "V", "B", "H", "S", "D", "Q")
FP_SIMD_EXT(41 , "V", "B", "H", "S", "D", "Q")
FP_SIMD_EXT(42, "V", "B", "H", "S", "D", "Q")
FP_SIMD_EXT(43, "V", "B", "H", "S", "D", "Q")
FP_SIMD_EXT(44, "V", "B", "H", "S", "D", "Q")
FP_SIMD_EXT(45, "V", "B", "H", "S", "D", "Q")
FP_SIMD_EXT(46, "V", "B", "H", "S", "D", "Q")
FP_SIMD_EXT(47, "V", "B", "H", "S", "D", "Q")
FP_SIMD_EXT(48, "V", "B", "H", "S", "D", "Q")
FP_SIMD_EXT(49, "V", "B", "H", "S", "D", "Q")
FP_SIMD_EXT(50, "V", "B", "H", "S", "D", "Q")
FP_SIMD_EXT(51, "V", "B", "H", "S", "D", "Q")
FP_SIMD_EXT(52, "V", "B", "H", "S", "D", "Q")
FP_SIMD_EXT(53, "V", "B", "H", "S", "D", "Q")
FP_SIMD_EXT(54, "V", "B", "H", "S", "D", "Q")
FP_SIMD_EXT(55, "V", "B", "H", "S", "D", "Q")
FP_SIMD_EXT(56, "V", "B", "H", "S", "D", "Q")
FP_SIMD_EXT(57, "V", "B", "H", "S", "D", "Q")
FP_SIMD_EXT(59, "V", "B", "H", "S", "D", "Q")
FP_SIMD_EXT(60, "V", "B", "H", "S", "D", "Q")
FP_SIMD_EXT(61, "V", "B", "H", "S", "D", "Q")
FP_SIMD_EXT(62, "V", "B", "H", "S", "D", "Q")
FP_SIMD_EXT(63, "V", "B", "H", "S", "D", "Q")

FP_SIMD_EXT_BASE(64)

FP_SIMD_EXT(64, "V", "B", "H", "S", "D", "Q")
FP_SIMD_EXT(65 , "V", "B", "H", "S", "D", "Q")
FP_SIMD_EXT(66 , "V", "B", "H", "S", "D", "Q")
FP_SIMD_EXT(67 , "V", "B", "H", "S", "D", "Q")
FP_SIMD_EXT(68 , "V", "B", "H", "S", "D", "Q")
FP_SIMD_EXT(69 , "V", "B", "H", "S", "D", "Q")
FP_SIMD_EXT(70 , "V", "B", "H", "S", "D", "Q")
FP_SIMD_EXT(71 , "V", "B", "H", "S", "D", "Q")
FP_SIMD_EXT(72 , "V", "B", "H", "S", "D", "Q")
FP_SIMD_EXT(73 , "V", "B", "H", "S", "D", "Q")
FP_SIMD_EXT(74 , "V", "B", "H", "S", "D", "Q")
FP_SIMD_EXT(75, "V", "B", "H", "S", "D", "Q")
FP_SIMD_EXT(76, "V", "B", "H", "S", "D", "Q")
FP_SIMD_EXT(77, "V", "B", "H", "S", "D", "Q")
FP_SIMD_EXT(78, "V", "B", "H", "S", "D", "Q")
FP_SIMD_EXT(79, "V", "B", "H", "S", "D", "Q")
FP_SIMD_EXT(80, "V", "B", "H", "S", "D", "Q")
FP_SIMD_EXT(81, "V", "B", "H", "S", "D", "Q")
FP_SIMD_EXT(82, "V", "B", "H", "S", "D", "Q")
FP_SIMD_EXT(83, "V", "B", "H", "S", "D", "Q")
FP_SIMD_EXT(84, "V", "B", "H", "S", "D", "Q")
FP_SIMD_EXT(85, "V", "B", "H", "S", "D", "Q")
FP_SIMD_EXT(86, "V", "B", "H", "S", "D", "Q")
FP_SIMD_EXT(87, "V", "B", "H", "S", "D", "Q")
FP_SIMD_EXT(88, "V", "B", "H", "S", "D", "Q")
FP_SIMD_EXT(89, "V", "B", "H", "S", "D", "Q")
FP_SIMD_EXT(90, "V", "B", "H", "S", "D", "Q")
FP_SIMD_EXT(91, "V", "B", "H", "S", "D", "Q")
FP_SIMD_EXT(92, "V", "B", "H", "S", "D", "Q")
FP_SIMD_EXT(93, "V", "B", "H", "S", "D", "Q")
FP_SIMD_EXT(94, "V", "B", "H", "S", "D", "Q")
FP_SIMD_EXT(95, "V", "B", "H", "S", "D", "Q")

// Alias ID
FP_SIMD_REG_ALIAS(0)
FP_SIMD_REG_ALIAS(1)
FP_SIMD_REG_ALIAS(2)
FP_SIMD_REG_ALIAS(3)
FP_SIMD_REG_ALIAS(4)
FP_SIMD_REG_ALIAS(5)
FP_SIMD_REG_ALIAS(6)
FP_SIMD_REG_ALIAS(7)

//FP_SIMD_REG_ALIAS_64BIT_SCALAR(0)
//FP_SIMD_REG_ALIAS_64BIT_SCALAR(1)
//FP_SIMD_REG_ALIAS_64BIT_SCALAR(2)
//FP_SIMD_REG_ALIAS_64BIT_SCALAR(3)
//FP_SIMD_REG_ALIAS_64BIT_SCALAR(4)
//FP_SIMD_REG_ALIAS_64BIT_SCALAR(5)
//FP_SIMD_REG_ALIAS_64BIT_SCALAR(6)
//FP_SIMD_REG_ALIAS_64BIT_SCALAR(7)

