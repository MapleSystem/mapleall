/*
 * Copyright (c) [2020] Huawei Technologies Co.,Ltd.All rights reserved.
 *
 * OpenArkCompiler is licensed under the Mulan Permissive Software License v2.
 * You can use this software according to the terms and conditions of the MulanPSL - 2.0.
 * You may obtain a copy of MulanPSL - 2.0 at:
 *
 *   https://opensource.org/licenses/MulanPSL-2.0
 *
 * THIS SOFTWARE IS PROVIDED ON AN "AS IS" BASIS, WITHOUT WARRANTIES OF ANY KIND, EITHER
 * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO NON-INFRINGEMENT, MERCHANTABILITY OR
 * FIT FOR A PARTICULAR PURPOSE.
 * See the MulanPSL - 2.0 for more details.
 */

// MOP_undef
DEFINE_MOP(MOP_undef, {MOPD_Undef, MOPD_Undef, MOPD_Undef, MOPD_Undef, MOPD_Undef}, 0, nullptr, nullptr)
// arithmetic
// MOP_add32rr
DEFINE_MOP(MOP_add32rr, {MOPD_Reg32ID, MOPD_Reg, MOPD_Reg, MOPD_Undef, MOPD_Undef}, ISX86STYLE, "addl", "2,0")
// MOP_add32ri,
DEFINE_MOP(MOP_add32ri, {MOPD_Reg32ID, MOPD_Reg, MOPD_Imm32, MOPD_Undef, MOPD_Undef}, ISX86STYLE, "addl", "2,0")
// MOP_add32rm,
DEFINE_MOP(MOP_add32rm, {MOPD_Reg32ID, MOPD_Reg, MOPD_Mem, MOPD_Undef, MOPD_Undef}, ISX86STYLE, "addl", "2,0")
// MOP_add32mr,
// MOP_add32mi,
// MOP_add64rr,
DEFINE_MOP(MOP_add64rr, {MOPD_Reg64ID, MOPD_Reg64IS, MOPD_Reg64IS, MOPD_Undef, MOPD_Undef}, ISX86STYLE, "addq", "2,0")
// MOP_add64ri,
DEFINE_MOP(MOP_add64ri, {MOPD_Reg64ID, MOPD_Reg64IS, MOPD_Imm32, MOPD_Undef, MOPD_Undef}, ISX86STYLE, "addq", "2,0")
// MOP_add64rm,
DEFINE_MOP(MOP_add64rm, {MOPD_Reg64ID, MOPD_Reg64IS, MOPD_Mem64S, MOPD_Undef, MOPD_Undef}, ISX86STYLE, "addq", "2,0")
// MOP_add64mr,
// MOP_add64mi,
// MOP_addsdrr,
DEFINE_MOP(MOP_addsdrr, {MOPD_Reg64FD, MOPD_Reg64FS, MOPD_Reg64FS, MOPD_Undef, MOPD_Undef}, ISX86STYLE, "addsd", "2,0")
// MOP_addsdrm,
DEFINE_MOP(MOP_addsdrm, {MOPD_Reg64FD, MOPD_Reg64FS, MOPD_Mem64S, MOPD_Undef, MOPD_Undef}, ISX86STYLE, "addsd", "2,0")
//MOP_addssrr,
DEFINE_MOP(MOP_addssrr, {MOPD_Reg32FD, MOPD_Reg32FS, MOPD_Reg32FS, MOPD_Undef, MOPD_Undef}, ISX86STYLE, "addss", "2,0")
//MOP_addssrm,
DEFINE_MOP(MOP_addssrm, {MOPD_Reg32FD, MOPD_Reg32FS, MOPD_Mem32S, MOPD_Undef, MOPD_Undef}, ISX86STYLE, "addss", "2,0")
//MOP_addc32rr,
DEFINE_MOP(MOP_addc32rr, {MOPD_Reg32ID, MOPD_Reg32IS, MOPD_Reg32ID, MOPD_Undef, MOPD_Undef}, ISX86STYLE, "adcl", "2,0")
//MOP_addc32ri,
DEFINE_MOP(MOP_addc32ri, {MOPD_Reg32ID, MOPD_Reg32IS, MOPD_Imm32, MOPD_Undef, MOPD_Undef}, ISX86STYLE, "adcl", "2,0")
//MOP_addc32rm,
DEFINE_MOP(MOP_addc32rm, {MOPD_Reg32ID, MOPD_Reg32IS, MOPD_Mem32S, MOPD_Undef, MOPD_Undef}, ISX86STYLE, "adcl", "2,0")
//MOP_addc32mr,
//MOP_addc32mi,
//MOP_div32r,  // enhance when the operands is: eax edx eax edx int32
DEFINE_MOP(MOP_div32r, {MOPD_RAX32D, MOPD_RDX32D, MOPD_RDX32S, MOPD_RAX32S, MOPD_Reg32IS}, USESPECREG, "divl", "4")
//MOP_div32m,
DEFINE_MOP(MOP_div32m, {MOPD_RAX32D, MOPD_RDX32D, MOPD_RDX32S, MOPD_RAX32S, MOPD_Mem32S}, USESPECREG, "divl", "4")
//MOP_div64r,
DEFINE_MOP(MOP_div64r, {MOPD_RAX64D, MOPD_RDX64D, MOPD_RDX64S, MOPD_RAX64S, MOPD_Reg64IS}, USESPECREG, "divq", "4")
//MOP_div64m,
DEFINE_MOP(MOP_div64m, {MOPD_RAX64D, MOPD_RDX64D, MOPD_RDX64S, MOPD_RAX64S, MOPD_Mem64S}, USESPECREG, "divq", "4")
//MOP_idiv32r,
DEFINE_MOP(MOP_idiv32r, {MOPD_RAX32D, MOPD_RDX32D, MOPD_RDX32S, MOPD_RAX32S, MOPD_Reg32IS}, USESPECREG, "idivl", "4")
//MOP_idiv32m,
DEFINE_MOP(MOP_idiv32m, {MOPD_RAX32D, MOPD_RDX32D, MOPD_RDX32S, MOPD_RAX32S, MOPD_Mem32S}, USESPECREG, "idivl", "4")
//MOP_idiv64r,
DEFINE_MOP(MOP_idiv64r, {MOPD_RAX64D, MOPD_RDX64D, MOPD_RDX64S, MOPD_RAX64S, MOPD_Reg64IS}, USESPECREG, "idivq", "4")
//MOP_idiv64m,
DEFINE_MOP(MOP_idiv64m, {MOPD_RAX64D, MOPD_RDX64D, MOPD_RDX64S, MOPD_RAX64S, MOPD_Mem64S}, USESPECREG, "idivq", "4")
//MOP_imul32rr,
DEFINE_MOP(MOP_imul32rr, {MOPD_Reg32ID, MOPD_Reg32IS, MOPD_Reg32IS, MOPD_Undef, MOPD_Undef}, ISX86STYLE, "imull", "2,0")
//MOP_imul32ri,
DEFINE_MOP(MOP_imul32ri, {MOPD_Reg32ID, MOPD_Reg32IS, MOPD_Imm32, MOPD_Undef, MOPD_Undef}, ISX86STYLE, "imull", "2,0")
//MOP_imul32rm,
DEFINE_MOP(MOP_imul32rm, {MOPD_Reg32ID, MOPD_Reg32IS, MOPD_Mem32S, MOPD_Undef, MOPD_Undef}, ISX86STYLE, "imull", "2,0")
//MOP_imul64rr,
DEFINE_MOP(MOP_imul64rr, {MOPD_Reg64ID, MOPD_Reg64IS, MOPD_Reg64IS, MOPD_Undef, MOPD_Undef}, ISX86STYLE, "imulq", "2,0")
//MOP_imul64ri,
DEFINE_MOP(MOP_imul64ri, {MOPD_Reg64ID, MOPD_Reg64ID, MOPD_Imm64, MOPD_Undef, MOPD_Undef}, ISX86STYLE, "imulq", "2,0")
//MOP_imul64rm,
DEFINE_MOP(MOP_imul64rm, {MOPD_Reg64ID, MOPD_Reg64IS, MOPD_Mem64S, MOPD_Undef, MOPD_Undef}, ISX86STYLE, "imulq", "2,0")
//MOP_mul32,
DEFINE_MOP(MOP_mul32, {MOPD_RAX32D, MOPD_RDX32S, MOPD_RAX32S, MOPD_Reg32IS, MOPD_Undef}, USESPECREG, "mull", "3")
//MOP_mul64,
DEFINE_MOP(MOP_mul64, {MOPD_RAX64D, MOPD_RDX64S, MOPD_RAX64S, MOPD_Reg64IS, MOPD_Undef}, USESPECREG, "mulq", "3")
//MOP_mulsdrr,
DEFINE_MOP(MOP_mulsdrr, {MOPD_Reg64FD, MOPD_Reg64FS, MOPD_Reg64FS, MOPD_Undef, MOPD_Undef}, ISX86STYLE, "mulsd", "2,0")
//MOP_mulsdrm,
DEFINE_MOP(MOP_mulsdrm, {MOPD_Reg64FD, MOPD_Reg64FS, MOPD_Mem64S, MOPD_Undef, MOPD_Undef}, ISX86STYLE, "mulsd", "2,0")
//MOP_mulssrr,
DEFINE_MOP(MOP_mulssrr, {MOPD_Reg32FD, MOPD_Reg32FS, MOPD_Reg32FS, MOPD_Undef, MOPD_Undef}, ISX86STYLE, "mulss", "2,0")
//MOP_mulssrm,
DEFINE_MOP(MOP_mulssrm, {MOPD_Reg32FD, MOPD_Reg32FS, MOPD_Mem32S, MOPD_Undef, MOPD_Undef}, ISX86STYLE, "mulss", "2,0")
//MOP_inc32r,
DEFINE_MOP(MOP_inc32r, {MOPD_Reg32ID, MOPD_Reg32IS, MOPD_Undef, MOPD_Undef, MOPD_Undef}, 0, "incl", "0")
//MOP_inc64r,
DEFINE_MOP(MOP_inc64r, {MOPD_Reg64ID, MOPD_Reg64IS, MOPD_Undef, MOPD_Undef, MOPD_Undef}, 0, "incq", "0")
//MOP_inc32m,
//MOP_inc64m,
//MOP_dec32r,
DEFINE_MOP(MOP_dec32r, {MOPD_Reg32ID, MOPD_Reg32IS, MOPD_Undef, MOPD_Undef, MOPD_Undef}, 0, "decl", "0")
//MOP_dec64r,
DEFINE_MOP(MOP_dec64r, {MOPD_Reg64ID, MOPD_Reg64IS, MOPD_Undef, MOPD_Undef, MOPD_Undef}, 0, "decq", "0")
//MOP_dec32m,
//MOP_dec64m,
//MOP_xchg32rr,
DEFINE_MOP(MOP_xchg32rr, {MOPD_Reg32ID, MOPD_Reg32IS, MOPD_Reg32IS, MOPD_Undef, MOPD_Undef}, ISX86STYLE, "xchgl", "2,0")
//MOP_xchg32rm,
DEFINE_MOP(MOP_xchg32rm, {MOPD_Reg32ID, MOPD_Reg32IS, MOPD_Mem32S, MOPD_Undef, MOPD_Undef}, ISX86STYLE, "xchgl", "2,0")
//MOP_xchg64rr,
DEFINE_MOP(MOP_xchg64rr, {MOPD_Reg64ID, MOPD_Reg64IS, MOPD_Reg64IS, MOPD_Undef, MOPD_Undef}, ISX86STYLE, "xchgq", "2,0")
//MOP_xchg64rm,
DEFINE_MOP(MOP_xchg64rm, {MOPD_Reg64ID, MOPD_Reg64IS, MOPD_Mem64S, MOPD_Undef, MOPD_Undef}, ISX86STYLE, "xchgq", "2,0")
//MOP_neg32r,
DEFINE_MOP(MOP_neg32r, {MOPD_Reg32ID, MOPD_Reg32IS, MOPD_Undef, MOPD_Undef, MOPD_Undef}, 0, "negl", "0")
//MOP_neg32m,
//MOP_neg64r,
DEFINE_MOP(MOP_neg64r, {MOPD_Reg64ID, MOPD_Reg64IS, MOPD_Undef, MOPD_Undef, MOPD_Undef}, 0, "negq", "0")
//MOP_neg64m,
//MOP_sqrtss,
DEFINE_MOP(MOP_sqrtss, {MOPD_Reg32FD, MOPD_Reg32FS, MOPD_Undef, MOPD_Undef, MOPD_Undef}, 0, "sqrtss", "0,1")
//MOP_sqrtsd,
DEFINE_MOP(MOP_sqrtsd, {MOPD_Reg64FD, MOPD_Reg64FS, MOPD_Undef, MOPD_Undef, MOPD_Undef}, 0, "sqrtsd", "0,1")
//MOP_not32r,
DEFINE_MOP(MOP_not32r, {MOPD_Reg32ID, MOPD_Reg32IS, MOPD_Undef, MOPD_Undef, MOPD_Undef}, 0, "notl", "0")
//MOP_not32m,
//MOP_not64r,
DEFINE_MOP(MOP_not64r, {MOPD_Reg64ID, MOPD_Reg64IS, MOPD_Undef, MOPD_Undef, MOPD_Undef}, 0, "notq", "0")
//MOP_not64m,
//MOP_sub32rr,
DEFINE_MOP(MOP_sub32rr, {MOPD_Reg32ID, MOPD_Reg32IS, MOPD_Reg32IS, MOPD_Undef, MOPD_Undef}, ISX86STYLE, "subl", "2,0")
//MOP_sub32ri,
DEFINE_MOP(MOP_sub32ri, {MOPD_Reg32ID, MOPD_Reg32IS, MOPD_Imm32, MOPD_Undef, MOPD_Undef}, ISX86STYLE, "subl", "2,0")
//MOP_sub32rm,
DEFINE_MOP(MOP_sub32rm, {MOPD_Reg32ID, MOPD_Reg32IS, MOPD_Mem32S, MOPD_Undef, MOPD_Undef}, ISX86STYLE, "subl", "2,0")
//MOP_sub32mr,
//MOP_sub32mi,
//MOP_sub64rr,
DEFINE_MOP(MOP_sub64rr, {MOPD_Reg64ID, MOPD_Reg64IS, MOPD_Reg64IS, MOPD_Undef, MOPD_Undef}, ISX86STYLE, "subq", "2,0")
//MOP_sub64ri,
DEFINE_MOP(MOP_sub64ri, {MOPD_Reg64ID, MOPD_Reg64IS, MOPD_Imm32, MOPD_Undef, MOPD_Undef}, ISX86STYLE, "subq", "2,0")
//MOP_sub64rm,
DEFINE_MOP(MOP_sub64rm, {MOPD_Reg64ID, MOPD_Reg64IS, MOPD_Mem64S, MOPD_Undef, MOPD_Undef}, ISX86STYLE, "subq", "2,0")
//MOP_sub64mr,
//MOP_sub64mi,
//MOP_subsdrr,
DEFINE_MOP(MOP_subsdrr, {MOPD_Reg64FD, MOPD_Reg64FS, MOPD_Reg64FS, MOPD_Undef, MOPD_Undef}, ISX86STYLE, "subsd", "2,0")
//MOP_subsdrm,
DEFINE_MOP(MOP_subsdrm, {MOPD_Reg64FD, MOPD_Reg64FS, MOPD_Mem64S, MOPD_Undef, MOPD_Undef}, ISX86STYLE, "subsd", "2,0")
//MOP_subssrr,
DEFINE_MOP(MOP_subssrr, {MOPD_Reg32FD, MOPD_Reg32FS, MOPD_Reg32FS, MOPD_Undef, MOPD_Undef}, ISX86STYLE, "subss", "2,0")
//MOP_subssrm,
DEFINE_MOP(MOP_subssrm, {MOPD_Reg32FD, MOPD_Reg32FS, MOPD_Mem32S, MOPD_Undef, MOPD_Undef}, ISX86STYLE, "subss", "2,0")
//MOP_divssrr
DEFINE_MOP(MOP_divssrr, {MOPD_Reg32FD, MOPD_Reg32FS, MOPD_Reg32FS, MOPD_Undef, MOPD_Undef}, ISX86STYLE, "divss", "2,0")
//MOP_divssrm,
DEFINE_MOP(MOP_divssrm, {MOPD_Reg32FD, MOPD_Reg32FS, MOPD_Mem32S, MOPD_Undef, MOPD_Undef}, ISX86STYLE, "divss", "2,0")
//MOP_divsdrr
DEFINE_MOP(MOP_divsdrr, {MOPD_Reg64FD, MOPD_Reg64FS, MOPD_Reg64FS, MOPD_Undef, MOPD_Undef}, ISX86STYLE, "divsd", "2,0")
//MOP_divsdrm,
DEFINE_MOP(MOP_divsdrm, {MOPD_Reg64FD, MOPD_Reg64FS, MOPD_Mem64S, MOPD_Undef, MOPD_Undef}, ISX86STYLE, "divsd", "2,0")
// logic
//MOP_and32rr,
DEFINE_MOP(MOP_and32rr, {MOPD_Reg32ID, MOPD_Reg32IS, MOPD_Reg32IS, MOPD_Undef, MOPD_Undef}, ISX86STYLE, "andl", "2,0")
//MOP_and32ri,
DEFINE_MOP(MOP_and32ri, {MOPD_Reg32ID, MOPD_Reg32IS, MOPD_Imm32, MOPD_Undef, MOPD_Undef}, ISX86STYLE, "andl", "2,0")
//MOP_and32rm,
DEFINE_MOP(MOP_and32rm, {MOPD_Reg32ID, MOPD_Reg32IS, MOPD_Mem32S, MOPD_Undef, MOPD_Undef}, ISX86STYLE, "andl", "2,0")
//MOP_and32mr,
//MOP_and32mi,
//MOP_and64rr,
DEFINE_MOP(MOP_and64rr, {MOPD_Reg64ID, MOPD_Reg64IS, MOPD_Reg64IS, MOPD_Undef, MOPD_Undef}, ISX86STYLE, "andq", "2,0")
//MOP_and64ri,
DEFINE_MOP(MOP_and64ri, {MOPD_Reg64ID, MOPD_Reg64IS, MOPD_Imm32, MOPD_Undef, MOPD_Undef}, ISX86STYLE, "andq", "2,0")
//MOP_and64rm,
DEFINE_MOP(MOP_and64rm, {MOPD_Reg64ID, MOPD_Reg64IS, MOPD_Mem64S, MOPD_Undef, MOPD_Undef}, ISX86STYLE, "andq", "2,0")
//MOP_andpsrr,  // FIXME: this is actually a vector operator
DEFINE_MOP(MOP_andpsrr, {MOPD_Reg32FS, MOPD_Reg32FS, MOPD_Reg32FS, MOPD_Undef, MOPD_Undef}, ISX86STYLE, "andps", "2,0")
//MOP_andpdrr,  // FIXME: this is actually a vector operator
DEFINE_MOP(MOP_andpdrr, {MOPD_Reg64FS, MOPD_Reg64FS, MOPD_Reg64FS, MOPD_Undef, MOPD_Undef}, ISX86STYLE, "andpd", "2,0")
//MOP_andnpsrr,  // FIXME: this is actually a vector operator
DEFINE_MOP(MOP_andnpsrr, {MOPD_Reg32FS, MOPD_Reg32FS, MOPD_Reg32FS, MOPD_Undef, MOPD_Undef}, ISX86STYLE, "andnps", "2,0")
//MOP_andnpdrr,  // FIXME: this is actually a vector operator
DEFINE_MOP(MOP_andnpdrr, {MOPD_Reg64FS, MOPD_Reg64FS, MOPD_Reg64FS, MOPD_Undef, MOPD_Undef}, ISX86STYLE, "andnpd", "2,0")
//MOP_orpsrr,  // FIXME: this is actually a vector operator
DEFINE_MOP(MOP_orpsrr, {MOPD_Reg32FS, MOPD_Reg32FS, MOPD_Reg32FS, MOPD_Undef, MOPD_Undef}, ISX86STYLE, "orps", "2,0")
//MOP_orpdrr,  // FIXME: this is actually a vector operator
DEFINE_MOP(MOP_orpdrr, {MOPD_Reg64FS, MOPD_Reg64FS, MOPD_Reg64FS, MOPD_Undef, MOPD_Undef}, ISX86STYLE, "orpd", "2,0")
//MOP_and64mr,
//MOP_and64mi,
//MOP_or32rr,
DEFINE_MOP(MOP_or32rr, {MOPD_Reg32ID, MOPD_Reg32IS, MOPD_Reg32IS, MOPD_Undef, MOPD_Undef}, ISX86STYLE, "orl", "2,0")
//MOP_or32ri,
DEFINE_MOP(MOP_or32ri, {MOPD_Reg32ID, MOPD_Reg32IS, MOPD_Imm32, MOPD_Undef, MOPD_Undef}, ISX86STYLE, "orl", "2,0")
//MOP_or32rm,
DEFINE_MOP(MOP_or32rm, {MOPD_Reg32ID, MOPD_Reg32IS, MOPD_Mem32S, MOPD_Undef, MOPD_Undef}, ISX86STYLE, "orl", "2,0")
//MOP_or32mr,
//MOP_or32mi,
//MOP_or64rr,
DEFINE_MOP(MOP_or64rr, {MOPD_Reg64ID, MOPD_Reg64IS, MOPD_Reg64IS, MOPD_Undef, MOPD_Undef}, ISX86STYLE, "orq", "2,0")
//MOP_or64ri,
DEFINE_MOP(MOP_or64ri, {MOPD_Reg64ID, MOPD_Reg64IS, MOPD_Imm32, MOPD_Undef, MOPD_Undef}, ISX86STYLE, "orq", "2,0")
//MOP_or64rm,
DEFINE_MOP(MOP_or64rm, {MOPD_Reg64ID, MOPD_Reg64IS, MOPD_Mem64S, MOPD_Undef, MOPD_Undef}, ISX86STYLE, "orq", "2,0")
//MOP_or64mr,
//MOP_or64mi,
//MOP_ori32,
//MOP_ori64,
//MOP_ror32,
DEFINE_MOP(MOP_ror32, {MOPD_Reg32ID, MOPD_Reg32IS, MOPD_Reg32IS, MOPD_Undef, MOPD_Undef}, ISX86STYLE, "rorl", "2,0")
//MOP_ror64,
DEFINE_MOP(MOP_ror64, {MOPD_Reg64ID, MOPD_Reg64IS, MOPD_Reg64IS, MOPD_Undef, MOPD_Undef}, ISX86STYLE, "rorq", "2,0")
//MOP_rori32,
DEFINE_MOP(MOP_rori32, {MOPD_Reg32ID, MOPD_Reg32IS, MOPD_Imm32, MOPD_Undef, MOPD_Undef}, ISX86STYLE, "rorl", "2,0")
//MOP_rori64,
DEFINE_MOP(MOP_rori64, {MOPD_Reg64ID, MOPD_Reg64IS, MOPD_Imm32, MOPD_Undef, MOPD_Undef}, ISX86STYLE, "rorq", "2,0")
//MOP_rol32,
DEFINE_MOP(MOP_rol32, {MOPD_Reg32ID, MOPD_Reg32IS, MOPD_Reg32IS, MOPD_Undef, MOPD_Undef}, ISX86STYLE, "roll", "2,0")
//MOP_rol64,
DEFINE_MOP(MOP_rol64, {MOPD_Reg64ID, MOPD_Reg64IS, MOPD_Reg64IS, MOPD_Undef, MOPD_Undef}, ISX86STYLE, "rolq", "2,0")
//MOP_roli32,
DEFINE_MOP(MOP_roli32, {MOPD_Reg32ID, MOPD_Reg32IS, MOPD_Imm32, MOPD_Undef, MOPD_Undef}, ISX86STYLE, "roll", "2,0")
//MOP_roli64,
DEFINE_MOP(MOP_roli64, {MOPD_Reg64ID, MOPD_Reg64IS, MOPD_Imm32, MOPD_Undef, MOPD_Undef}, ISX86STYLE, "rolq", "2,0")
//MOP_xor32rr,
DEFINE_MOP(MOP_xor32rr, {MOPD_Reg32ID, MOPD_Reg32IS, MOPD_Reg32IS, MOPD_Undef, MOPD_Undef}, ISX86STYLE, "xorl", "2,0")
//MOP_xor32ri,
DEFINE_MOP(MOP_xor32ri, {MOPD_Reg32ID, MOPD_Reg32IS, MOPD_Imm32, MOPD_Undef, MOPD_Undef}, ISX86STYLE, "xorl", "2,0")
//MOP_xor32rm,
DEFINE_MOP(MOP_xor32rm, {MOPD_Reg32ID, MOPD_Reg32IS, MOPD_Mem32S, MOPD_Undef, MOPD_Undef}, ISX86STYLE, "xorl", "2,0")
//MOP_xor64rr,
DEFINE_MOP(MOP_xor64rr, {MOPD_Reg64ID, MOPD_Reg64IS, MOPD_Reg64IS, MOPD_Undef, MOPD_Undef}, ISX86STYLE, "xorq", "2,0")
//MOP_xor64ri,
DEFINE_MOP(MOP_xor64ri, {MOPD_Reg64ID, MOPD_Reg64IS, MOPD_Imm32, MOPD_Undef, MOPD_Undef}, ISX86STYLE, "xorq", "2,0")
//MOP_xor64rm,
DEFINE_MOP(MOP_xor64rm, {MOPD_Reg64ID, MOPD_Reg64IS, MOPD_Mem, MOPD_Undef, MOPD_Undef}, ISX86STYLE, "xorq", "2,0")
//MOP_xorps32rr,
DEFINE_MOP(MOP_xorps32rr, {MOPD_Reg32FD, MOPD_Reg32FS, MOPD_Reg32FS, MOPD_Undef, MOPD_Undef}, ISX86STYLE, "xorps", "2,0")
//MOP_xorps32rm,
DEFINE_MOP(MOP_xorps32rm, {MOPD_Reg32FD, MOPD_Reg32FS, MOPD_Mem32S, MOPD_Undef, MOPD_Undef}, ISX86STYLE, "xorps", "2,0")
//MOP_xorpd64rr,
DEFINE_MOP(MOP_xorpd64rr, {MOPD_Reg64FD, MOPD_Reg64FS, MOPD_Reg64FS, MOPD_Undef, MOPD_Undef}, ISX86STYLE, "xorpd", "2,0")
//MOP_xorpd64rm,  // fixme mem here is 128
DEFINE_MOP(MOP_xorpd64rm, {MOPD_Reg64FD, MOPD_Reg64FS, MOPD_Mem64S, MOPD_Undef, MOPD_Undef}, ISX86STYLE, "xorpd", "2,0")
//MOP_xor64mr,
//MOP_xor64mi,
//MOP_ori32,
//MOP_ori64,
//MOP_sar32,
DEFINE_MOP(MOP_sar32, {MOPD_Reg32ID, MOPD_Reg32IS, MOPD_RCX8S, MOPD_Undef, MOPD_Undef}, ISX86STYLE | USESPECREG, "sarl", "2,0")
//MOP_sar64,
DEFINE_MOP(MOP_sar64, {MOPD_Reg64ID, MOPD_Reg64IS, MOPD_RCX8S, MOPD_Undef, MOPD_Undef}, ISX86STYLE | USESPECREG, "sarq", "2,0")
//MOP_sari32,
DEFINE_MOP(MOP_sari32, {MOPD_Reg32ID, MOPD_Reg32IS, MOPD_Imm32, MOPD_Undef, MOPD_Undef}, ISX86STYLE, "sarl", "2,0")
//MOP_sari64,
DEFINE_MOP(MOP_sari64, {MOPD_Reg64ID, MOPD_Reg64IS, MOPD_Imm32, MOPD_Undef, MOPD_Undef}, ISX86STYLE, "sarq", "2,0")
//MOP_shl32,
DEFINE_MOP(MOP_shl32, {MOPD_Reg32ID, MOPD_Reg32IS, MOPD_RCX8S, MOPD_Undef, MOPD_Undef}, ISX86STYLE | USESPECREG, "shll", "2,0")
//MOP_shld32,
DEFINE_MOP(MOP_shld32, {MOPD_Reg32ID, MOPD_Reg32IS, MOPD_Reg32IS, MOPD_Reg32IS, MOPD_Undef}, ISX86STYLE, "shldl", "2,0")
//MOP_shldi32,
DEFINE_MOP(MOP_shldi32, {MOPD_Reg32ID, MOPD_Reg32IS, MOPD_Reg32IS, MOPD_Imm32, MOPD_Undef}, ISX86STYLE, "shldl", "2,0")
//MOP_shrd32,
DEFINE_MOP(MOP_shrd32, {MOPD_Reg32ID, MOPD_Reg32IS, MOPD_Reg32IS, MOPD_Reg32IS, MOPD_Undef}, ISX86STYLE, "shrdl", "2,0")
//MOP_shrdi32,
DEFINE_MOP(MOP_shrdi32, {MOPD_Reg32ID, MOPD_Reg32IS, MOPD_Reg32IS, MOPD_Imm32, MOPD_Undef}, ISX86STYLE, "shrdl", "2,0")
//MOP_shl64,
DEFINE_MOP(MOP_shl64, {MOPD_Reg64ID, MOPD_Reg64IS, MOPD_RCX8S, MOPD_Undef, MOPD_Undef}, ISX86STYLE | USESPECREG, "shlq", "0")
//MOP_shli32,
DEFINE_MOP(MOP_shli32, {MOPD_Reg32ID, MOPD_Reg32IS, MOPD_Imm32, MOPD_Undef, MOPD_Undef}, ISX86STYLE, "shll", "2,0")
//MOP_shli64,
DEFINE_MOP(MOP_shli64, {MOPD_Reg64ID, MOPD_Reg64IS, MOPD_Imm32, MOPD_Undef, MOPD_Undef}, ISX86STYLE, "shlq", "2,0")
//MOP_shr32,
DEFINE_MOP(MOP_shr32, {MOPD_Reg32ID, MOPD_Reg32IS, MOPD_RCX8S, MOPD_Undef, MOPD_Undef}, ISX86STYLE | USESPECREG, "shrl", "0")
//MOP_shr64,
DEFINE_MOP(MOP_shr64, {MOPD_Reg64ID, MOPD_Reg64IS, MOPD_RCX8S, MOPD_Undef, MOPD_Undef}, ISX86STYLE | USESPECREG, "shlr", "0")
//MOP_shri32,
DEFINE_MOP(MOP_shri32, {MOPD_Reg32ID, MOPD_Reg32IS, MOPD_Imm32, MOPD_Undef, MOPD_Undef}, ISX86STYLE, "shrl", "2,0")
//MOP_shri64,
DEFINE_MOP(MOP_shri64, {MOPD_Reg64ID, MOPD_Reg64IS, MOPD_Imm32, MOPD_Undef, MOPD_Undef}, ISX86STYLE, "shrq", "2,0")
//MOP_minssrr,
DEFINE_MOP(MOP_minssrr, {MOPD_Reg32FD, MOPD_Reg32FS, MOPD_Reg32FS, MOPD_Undef, MOPD_Undef}, ISX86STYLE, "minss", "2,0")
//MOP_minssrm,
DEFINE_MOP(MOP_minssrm, {MOPD_Reg32FD, MOPD_Reg32FS, MOPD_Mem32S, MOPD_Undef, MOPD_Undef}, ISX86STYLE, "minss", "2,0")
//MOP_minsdrr,
DEFINE_MOP(MOP_minsdrr, {MOPD_Reg64FD, MOPD_Reg64FS, MOPD_Reg64FS, MOPD_Undef, MOPD_Undef}, ISX86STYLE, "minsd", "2,0")
//MOP_minsdrm,
DEFINE_MOP(MOP_minsdrm, {MOPD_Reg64FD, MOPD_Reg64FS, MOPD_Mem64S, MOPD_Undef, MOPD_Undef}, ISX86STYLE, "minsd", "2,0")
//MOP_maxssrr,
DEFINE_MOP(MOP_maxssrr, {MOPD_Reg32FD, MOPD_Reg32FS, MOPD_Reg32FS, MOPD_Undef, MOPD_Undef}, ISX86STYLE, "maxss", "2,0")
//MOP_maxssrm,
DEFINE_MOP(MOP_maxssrm, {MOPD_Reg32FD, MOPD_Reg32FS, MOPD_Mem32S, MOPD_Undef, MOPD_Undef}, ISX86STYLE, "maxss", "2,0")
//MOP_maxsdrr,
DEFINE_MOP(MOP_maxsdrr, {MOPD_Reg64FD, MOPD_Reg64FS, MOPD_Reg64FS, MOPD_Undef, MOPD_Undef}, ISX86STYLE, "maxsd", "2,0")
//MOP_maxsdrm,
DEFINE_MOP(MOP_maxsdrm, {MOPD_Reg64FD, MOPD_Reg64FS, MOPD_Mem64S, MOPD_Undef, MOPD_Undef}, ISX86STYLE, "maxsd", "2,0")
//MOP_cmp32rr,
DEFINE_MOP(MOP_cmp32rr, {MOPD_Reg32ID, MOPD_Reg32IS, MOPD_Reg32IS, MOPD_Undef, MOPD_Undef}, 0, "cmpl", "2,1")
//MOP_cmp32ri,
DEFINE_MOP(MOP_cmp32ri, {MOPD_Reg32ID, MOPD_Reg32IS, MOPD_Imm32, MOPD_Undef, MOPD_Undef}, 0, "cmpl", "2,1")
//MOP_cmp32rm,
DEFINE_MOP(MOP_cmp32rm, {MOPD_Reg32ID, MOPD_Reg32IS, MOPD_Mem32S, MOPD_Undef, MOPD_Undef}, 0, "cmpl", "2,1")
//MOP_cmp64rr,
DEFINE_MOP(MOP_cmp64rr, {MOPD_Reg64ID, MOPD_Reg64IS, MOPD_Reg64IS, MOPD_Undef, MOPD_Undef}, 0, "cmpq", "2,1")
//MOP_cmp64ri,
DEFINE_MOP(MOP_cmp64ri, {MOPD_Reg64ID, MOPD_Reg64IS, MOPD_Imm32, MOPD_Undef, MOPD_Undef}, 0, "cmpq", "2,1")
//MOP_cmp64rm,
DEFINE_MOP(MOP_cmp64rm, {MOPD_Reg64ID, MOPD_Reg64IS, MOPD_Mem64S, MOPD_Undef, MOPD_Undef}, 0, "cmpq", "2,1")
//MOP_comisdrr,
DEFINE_MOP(MOP_comisdrr, {MOPD_RegCCD, MOPD_Reg64FS, MOPD_Reg64FS, MOPD_Undef, MOPD_Undef}, 0, "comisd", "2,1")
//MOP_comisdrm,
DEFINE_MOP(MOP_comisdrm, {MOPD_RegCCD, MOPD_Reg64FS, MOPD_Mem64S, MOPD_Undef, MOPD_Undef}, 0, "comisd", "2,1")
//MOP_comissrr,
DEFINE_MOP(MOP_comissrr, {MOPD_RegCCD, MOPD_Reg32FS, MOPD_Reg32FS, MOPD_Undef, MOPD_Undef}, 0, "comiss", "2,1")
//MOP_comissrm,
DEFINE_MOP(MOP_comissrm, {MOPD_RegCCD, MOPD_Reg32FS, MOPD_Mem32S, MOPD_Undef, MOPD_Undef}, 0, "comiss", "2,1")
//MOP_ucomisdrr,
DEFINE_MOP(MOP_ucomisdrr, {MOPD_RegCCD, MOPD_Reg64FS, MOPD_Reg64FS, MOPD_Undef, MOPD_Undef}, 0, "ucomisd", "2,1")
//MOP_ucomisdrm,
DEFINE_MOP(MOP_ucomisdrm, {MOPD_RegCCD, MOPD_Reg64FS, MOPD_Mem64S, MOPD_Undef, MOPD_Undef}, 0, "ucomisd", "2,1")
//MOP_ucomissrr,
DEFINE_MOP(MOP_ucomissrr, {MOPD_RegCCD, MOPD_Reg32FS, MOPD_Reg32FS, MOPD_Undef, MOPD_Undef}, 0, "ucomiss", "2,1")
//MOP_ucomissrm,
DEFINE_MOP(MOP_ucomissrm, {MOPD_RegCCD, MOPD_Reg32FS, MOPD_Mem32S, MOPD_Undef, MOPD_Undef}, 0, "ucomiss", "2,1")
//MOP_cmpssrr,
DEFINE_MOP(MOP_cmpssrr, {MOPD_Reg, MOPD_Reg32FS, MOPD_Reg32FS, MOPD_Imm32, MOPD_Undef}, ISX86STYLE, "cmpss", "3,2,0")
//MOP_cmpssrm,
DEFINE_MOP(MOP_cmpssrm, {MOPD_Reg, MOPD_Reg32FS, MOPD_Reg32FS, MOPD_Mem32S, MOPD_Undef}, ISX86STYLE, "cmpss", "3,2,0")
//MOP_cmpsdrr,
DEFINE_MOP(MOP_cmpsdrr, {MOPD_Reg, MOPD_Reg64FS, MOPD_Reg64FS, MOPD_Imm32, MOPD_Undef}, ISX86STYLE, "cmpsd", "3,2,0")
//MOP_cmpsdrm,
DEFINE_MOP(MOP_cmpsdrm, {MOPD_Reg, MOPD_Reg64FS, MOPD_Mem64S, MOPD_Imm32, MOPD_Undef}, ISX86STYLE, "cmpsd", "3,2,0")
//MOP_test32rr,
DEFINE_MOP(MOP_test32rr, {MOPD_RegCCD, MOPD_Reg32IS, MOPD_Reg32IS, MOPD_Undef, MOPD_Undef}, 0, "testl", "2,1")
//MOP_test32ri,
DEFINE_MOP(MOP_test32ri, {MOPD_RegCCD, MOPD_Reg32IS, MOPD_Imm32, MOPD_Undef, MOPD_Undef}, 0, "testl", "2,1")
//MOP_test32rm,
DEFINE_MOP(MOP_test32rm, {MOPD_RegCCD, MOPD_Reg32IS, MOPD_Mem32S, MOPD_Undef, MOPD_Undef}, 0, "testl", "2,1")
//MOP_test64rr,
DEFINE_MOP(MOP_test64rr, {MOPD_RegCCD, MOPD_Reg64IS, MOPD_Reg64IS, MOPD_Undef, MOPD_Undef}, 0, "testq", "2,1")
//MOP_test64ri,
DEFINE_MOP(MOP_test64ri, {MOPD_RegCCD, MOPD_Reg64IS, MOPD_Imm32, MOPD_Undef, MOPD_Undef}, 0, "testq", "2,1")
//MOP_test64rm,
DEFINE_MOP(MOP_test64rm, {MOPD_RegCCD, MOPD_Reg64IS, MOPD_Mem64S, MOPD_Undef, MOPD_Undef}, 0, "testq", "2,1")
// program flow
//MOP_call,
DEFINE_MOP(MOP_call, {MOPD_Mem64S, MOPD_Undef, MOPD_Undef, MOPD_Undef, MOPD_Undef}, 0, "call", "0")
//MOP_icallr,
DEFINE_MOP(MOP_icallr, {MOPD_Reg64IS, MOPD_Undef, MOPD_Undef, MOPD_Undef, MOPD_Undef}, 0, "call", "*0")
//MOP_icallm,
DEFINE_MOP(MOP_icallm, {MOPD_Mem64S, MOPD_Undef, MOPD_Undef, MOPD_Undef, MOPD_Undef}, 0, "call", "0")
//MOP_jb,
DEFINE_MOP(MOP_jb, {MOPD_Reg, MOPD_Label, MOPD_Undef, MOPD_Undef, MOPD_Undef}, 0, "jb", "1")
//MOP_jae,
DEFINE_MOP(MOP_jae, {MOPD_Reg, MOPD_Label, MOPD_Undef, MOPD_Undef, MOPD_Undef}, 0, "jae", "1")
//MOP_jp,
DEFINE_MOP(MOP_jp, {MOPD_Reg, MOPD_Label, MOPD_Undef, MOPD_Undef, MOPD_Undef}, 0, "jp", "1")
//MOP_jnp,
DEFINE_MOP(MOP_jnp, {MOPD_Reg, MOPD_Label, MOPD_Undef, MOPD_Undef, MOPD_Undef}, 0, "jnp", "1")
//MOP_je,
DEFINE_MOP(MOP_je, {MOPD_Reg, MOPD_Label, MOPD_Undef, MOPD_Undef, MOPD_Undef}, 0, "je", "1")
//MOP_jne,
DEFINE_MOP(MOP_jne, {MOPD_Reg, MOPD_Label, MOPD_Undef, MOPD_Undef, MOPD_Undef}, 0, "jne", "1")
//MOP_jbe,
DEFINE_MOP(MOP_jbe, {MOPD_Reg, MOPD_Label, MOPD_Undef, MOPD_Undef, MOPD_Undef}, 0, "jbe", "1")
//MOP_ja,
DEFINE_MOP(MOP_ja, {MOPD_Reg, MOPD_Label, MOPD_Undef, MOPD_Undef, MOPD_Undef}, 0, "ja", "1")
//MOP_jl,
DEFINE_MOP(MOP_jl, {MOPD_Reg, MOPD_Label, MOPD_Undef, MOPD_Undef, MOPD_Undef}, 0, "jl", "1")
//MOP_jge,
DEFINE_MOP(MOP_jge, {MOPD_Reg, MOPD_Label, MOPD_Undef, MOPD_Undef, MOPD_Undef}, 0, "jge", "1")
//MOP_jle,
DEFINE_MOP(MOP_jle, {MOPD_Reg, MOPD_Label, MOPD_Undef, MOPD_Undef, MOPD_Undef}, 0, "jle", "1")
//MOP_jg,
DEFINE_MOP(MOP_jg, {MOPD_Reg, MOPD_Label, MOPD_Undef, MOPD_Undef, MOPD_Undef}, 0, "jg", "1")
//MOP_jcxz,
DEFINE_MOP(MOP_jcxz, {MOPD_Reg, MOPD_Label, MOPD_Undef, MOPD_Undef, MOPD_Undef}, 0, "jcxz", "1")
//MOP_jecxz,
DEFINE_MOP(MOP_jecxz, {MOPD_Reg, MOPD_Label, MOPD_Undef, MOPD_Undef, MOPD_Undef}, 0, "jecxz", "1")
//MOP_jrcxz,
DEFINE_MOP(MOP_jrcxz, {MOPD_Reg, MOPD_Label, MOPD_Undef, MOPD_Undef, MOPD_Undef}, 0, "jrcxz", "1")
//MOP_js,
DEFINE_MOP(MOP_js, {MOPD_Reg, MOPD_Label, MOPD_Undef, MOPD_Undef, MOPD_Undef}, 0, "js", "1")
//MOP_jns,
DEFINE_MOP(MOP_jns, {MOPD_Reg, MOPD_Label, MOPD_Undef, MOPD_Undef, MOPD_Undef}, 0, "jns", "1")
//MOP_jmp,
DEFINE_MOP(MOP_jmp, {MOPD_Label, MOPD_Undef, MOPD_Undef, MOPD_Undef, MOPD_Undef}, 0, "jmp", "0")
//MOP_ijmpr,
DEFINE_MOP(MOP_ijmpr, {MOPD_Reg64IS, MOPD_Undef, MOPD_Undef, MOPD_Undef, MOPD_Undef}, 0, "jmp", "*0")
//MOP_ijmpm,
DEFINE_MOP(MOP_ijmpm, {MOPD_Mem64S, MOPD_Undef, MOPD_Undef, MOPD_Undef, MOPD_Undef}, 0, "jmp", "*0")
//MOP_leave,
DEFINE_MOP(MOP_leave, {MOPD_Reg, MOPD_Reg, MOPD_Undef, MOPD_Undef, MOPD_Undef}, 0, "leave", "")
//MOP_ret,
DEFINE_MOP(MOP_ret, {MOPD_Undef, MOPD_Undef, MOPD_Undef, MOPD_Undef, MOPD_Undef}, 0, "ret", "")
//MOP_reti,
DEFINE_MOP(MOP_reti, {MOPD_Imm64, MOPD_Undef, MOPD_Undef, MOPD_Undef, MOPD_Undef}, 0, "ret", "0")

//MOP_seta,
DEFINE_MOP(MOP_seta, {MOPD_Reg8ID, MOPD_RegCCS, MOPD_Undef, MOPD_Undef, MOPD_Undef}, 0, "seta", "0")
//MOP_setae,
DEFINE_MOP(MOP_setae, {MOPD_Reg8ID, MOPD_RegCCS, MOPD_Undef, MOPD_Undef, MOPD_Undef}, 0, "setae", "0")

//MOP_setb,
DEFINE_MOP(MOP_setb, {MOPD_Reg8ID, MOPD_RegCCS, MOPD_Undef, MOPD_Undef, MOPD_Undef}, 0, "setb", "0")
//MOP_setbe,
DEFINE_MOP(MOP_setbe, {MOPD_Reg8ID, MOPD_RegCCS, MOPD_Undef, MOPD_Undef, MOPD_Undef}, 0, "setbe", "0")

//MOP_setc,
DEFINE_MOP(MOP_setc, {MOPD_Reg8ID, MOPD_RegCCS, MOPD_Undef, MOPD_Undef, MOPD_Undef}, 0, "setc", "0")
//MOP_sete,
DEFINE_MOP(MOP_sete, {MOPD_Reg8ID, MOPD_RegCCS, MOPD_Undef, MOPD_Undef, MOPD_Undef}, 0, "sete", "0")

//MOP_setg,
DEFINE_MOP(MOP_setg, {MOPD_Reg8ID, MOPD_RegCCS, MOPD_Undef, MOPD_Undef, MOPD_Undef}, 0, "setg", "0")
//MOP_setge,
DEFINE_MOP(MOP_setge, {MOPD_Reg8ID, MOPD_RegCCS, MOPD_Undef, MOPD_Undef, MOPD_Undef}, 0, "setge", "0")

//MOP_setl,
DEFINE_MOP(MOP_setl, {MOPD_Reg8ID, MOPD_RegCCS, MOPD_Undef, MOPD_Undef, MOPD_Undef}, 0, "setl", "0")
//MOP_setle,
DEFINE_MOP(MOP_setle, {MOPD_Reg8ID, MOPD_RegCCS, MOPD_Undef, MOPD_Undef, MOPD_Undef}, 0, "setle", "0")

//MOP_setp,
DEFINE_MOP(MOP_setp, {MOPD_Reg8ID, MOPD_RegCCS, MOPD_Undef, MOPD_Undef, MOPD_Undef}, 0, "setp", "0")
//MOP_setnp,
DEFINE_MOP(MOP_setnp, {MOPD_Reg8ID, MOPD_RegCCS, MOPD_Undef, MOPD_Undef, MOPD_Undef}, 0, "setnp", "0")

//MOP_setne,
DEFINE_MOP(MOP_setne, {MOPD_Reg8ID, MOPD_RegCCS, MOPD_Undef, MOPD_Undef, MOPD_Undef}, 0, "setne", "0")

// string operation
// data movement
//MOP_cmovb32,
DEFINE_MOP(MOP_cmovb32, {MOPD_Reg32ID, MOPD_Reg32IS, MOPD_RegCCS, MOPD_Undef, MOPD_Undef}, ISCONDDEF, "cmovb", "1,0")
//MOP_cmovae32,
DEFINE_MOP(MOP_cmovae32, {MOPD_Reg32ID, MOPD_Reg32IS, MOPD_RegCCS, MOPD_Undef, MOPD_Undef}, ISCONDDEF, "cmovae", "1,0")
//MOP_cmovp32,
DEFINE_MOP(MOP_cmovp32, {MOPD_Reg32ID, MOPD_Reg32IS, MOPD_RegCCS, MOPD_Undef, MOPD_Undef}, ISCONDDEF, "cmovp", "1,0")
//MOP_cmovnp32,
DEFINE_MOP(MOP_cmovnp32, {MOPD_Reg32ID, MOPD_Reg32IS, MOPD_RegCCS, MOPD_Undef, MOPD_Undef}, ISCONDDEF, "cmovnp", "1,0")
//MOP_cmove32,
DEFINE_MOP(MOP_cmove32, {MOPD_Reg32ID, MOPD_Reg32IS, MOPD_RegCCS, MOPD_Undef, MOPD_Undef}, ISCONDDEF, "cmove", "1,0")
//MOP_cmovne32,
DEFINE_MOP(MOP_cmovne32, {MOPD_Reg32ID, MOPD_Reg32IS, MOPD_RegCCS, MOPD_Undef, MOPD_Undef}, ISCONDDEF, "cmovne", "1,0")
//MOP_cmovbe32,
DEFINE_MOP(MOP_cmovbe32, {MOPD_Reg32ID, MOPD_Reg32IS, MOPD_RegCCS, MOPD_Undef, MOPD_Undef}, ISCONDDEF, "cmovbe", "1,0")
//MOP_cmova32,
DEFINE_MOP(MOP_cmova32, {MOPD_Reg32ID, MOPD_Reg32IS, MOPD_RegCCS, MOPD_Undef, MOPD_Undef}, ISCONDDEF, "cmova", "1,0")
//MOP_cmovl32,
DEFINE_MOP(MOP_cmovl32, {MOPD_Reg32ID, MOPD_Reg32IS, MOPD_RegCCS, MOPD_Undef, MOPD_Undef}, ISCONDDEF, "cmovl", "1,0")
//MOP_cmovge32,
DEFINE_MOP(MOP_cmovge32, {MOPD_Reg32ID, MOPD_Reg32IS, MOPD_RegCCS, MOPD_Undef, MOPD_Undef}, ISCONDDEF, "cmovge", "1,0")
//MOP_cmovle32,
DEFINE_MOP(MOP_cmovle32, {MOPD_Reg32ID, MOPD_Reg32IS, MOPD_RegCCS, MOPD_Undef, MOPD_Undef}, ISCONDDEF, "cmovle", "1,0")
//MOP_cmovg32,
DEFINE_MOP(MOP_cmovg32, {MOPD_Reg32ID, MOPD_Reg32IS, MOPD_RegCCS, MOPD_Undef, MOPD_Undef}, ISCONDDEF, "cmovg", "1,0")
//MOP_cmovs32,
DEFINE_MOP(MOP_cmovs32, {MOPD_Reg32ID, MOPD_Reg32IS, MOPD_RegCCS, MOPD_Undef, MOPD_Undef}, ISCONDDEF, "cmovs", "1,0")
//MOP_cmovz32,
DEFINE_MOP(MOP_cmovz32, {MOPD_Reg32ID, MOPD_Reg32IS, MOPD_RegCCS, MOPD_Undef, MOPD_Undef}, ISCONDDEF, "cmovz", "1,0")
//MOP_cmovo32,
DEFINE_MOP(MOP_cmovo32, {MOPD_Reg32ID, MOPD_Reg32IS, MOPD_RegCCS, MOPD_Undef, MOPD_Undef}, ISCONDDEF, "cmovo", "1,0")
//MOP_cmovns32,
DEFINE_MOP(MOP_cmovns32, {MOPD_Reg32ID, MOPD_Reg32IS, MOPD_RegCCS, MOPD_Undef, MOPD_Undef}, ISCONDDEF, "cmovns", "1,0")
//MOP_cmovb64,
DEFINE_MOP(MOP_cmovb64, {MOPD_Reg64ID, MOPD_Reg64IS, MOPD_RegCCS, MOPD_Undef, MOPD_Undef}, ISCONDDEF, "cmovbq", "1,0")
//MOP_cmovae64,
DEFINE_MOP(MOP_cmovae64, {MOPD_Reg64ID, MOPD_Reg64IS, MOPD_RegCCS, MOPD_Undef, MOPD_Undef}, ISCONDDEF, "cmovae", "1,0")
//MOP_cmovp64,
DEFINE_MOP(MOP_cmovp64, {MOPD_Reg64ID, MOPD_Reg64IS, MOPD_RegCCS, MOPD_Undef, MOPD_Undef}, ISCONDDEF, "cmovp", "1,0")
//MOP_cmovnp64,
DEFINE_MOP(MOP_cmovnp64, {MOPD_Reg64ID, MOPD_Reg64IS, MOPD_RegCCS, MOPD_Undef, MOPD_Undef}, ISCONDDEF, "cmovnp", "1,0")
//MOP_cmove64,
DEFINE_MOP(MOP_cmove64, {MOPD_Reg64ID, MOPD_Reg64IS, MOPD_RegCCS, MOPD_Undef, MOPD_Undef}, ISCONDDEF, "cmove", "1,0")
//MOP_cmovne64,
DEFINE_MOP(MOP_cmovne64, {MOPD_Reg64ID, MOPD_Reg64IS, MOPD_RegCCS, MOPD_Undef, MOPD_Undef}, ISCONDDEF, "cmovne", "1,0")
//MOP_cmovbe64,
DEFINE_MOP(MOP_cmovbe64, {MOPD_Reg64ID, MOPD_Reg64IS, MOPD_RegCCS, MOPD_Undef, MOPD_Undef}, ISCONDDEF, "cmovbe", "1,0")
//MOP_cmova64,
DEFINE_MOP(MOP_cmova64, {MOPD_Reg64ID, MOPD_Reg64IS, MOPD_RegCCS, MOPD_Undef, MOPD_Undef}, ISCONDDEF, "cmova", "1,0")
//MOP_cmovl64,
DEFINE_MOP(MOP_cmovl64, {MOPD_Reg64ID, MOPD_Reg64IS, MOPD_RegCCS, MOPD_Undef, MOPD_Undef}, ISCONDDEF, "cmovl", "1,0")
//MOP_cmovge64,
DEFINE_MOP(MOP_cmovge64, {MOPD_Reg64ID, MOPD_Reg64IS, MOPD_RegCCS, MOPD_Undef, MOPD_Undef}, ISCONDDEF, "cmovge", "1,0")
//MOP_cmovle64,
DEFINE_MOP(MOP_cmovle64, {MOPD_Reg64ID, MOPD_Reg64IS, MOPD_RegCCS, MOPD_Undef, MOPD_Undef}, ISCONDDEF, "cmovle", "1,0")
//MOP_cmovg64,
DEFINE_MOP(MOP_cmovg64, {MOPD_Reg64ID, MOPD_Reg64IS, MOPD_RegCCS, MOPD_Undef, MOPD_Undef}, ISCONDDEF, "cmovg", "1,0")
//MOP_cmovs64,
DEFINE_MOP(MOP_cmovs64, {MOPD_Reg64ID, MOPD_Reg64IS, MOPD_RegCCS, MOPD_Undef, MOPD_Undef}, ISCONDDEF, "cmovs", "1,0")
//MOP_cmovz64,
DEFINE_MOP(MOP_cmovz64, {MOPD_Reg64ID, MOPD_Reg64IS, MOPD_RegCCS, MOPD_Undef, MOPD_Undef}, ISCONDDEF, "cmovz", "1,0")
//MOP_cmovo64,
DEFINE_MOP(MOP_cmovo64, {MOPD_Reg64ID, MOPD_Reg64IS, MOPD_RegCCS, MOPD_Undef, MOPD_Undef}, ISCONDDEF, "cmovo", "1,0")
//MOP_cmovns64,
DEFINE_MOP(MOP_cmovns64, {MOPD_Reg64ID, MOPD_Reg64IS, MOPD_RegCCS, MOPD_Undef, MOPD_Undef}, ISCONDDEF, "cmovns", "1,0")
//MOP_ld8,
//MOP_ld16,
//MOP_ld32,
DEFINE_MOP(MOP_ld32, {MOPD_Reg32ID, MOPD_Mem32S, MOPD_Undef, MOPD_Undef, MOPD_Undef}, ISLOAD, "movl", "1,0")
//MOP_ld64,
DEFINE_MOP(MOP_ld64, {MOPD_Reg64ID, MOPD_Mem64S, MOPD_Undef, MOPD_Undef, MOPD_Undef}, ISLOAD, "movq", "1,0")
//MOP_ldu8,
//MOP_ldu16,
//MOP_ldss,
DEFINE_MOP(MOP_ldss, {MOPD_Reg32FD, MOPD_Mem32S, MOPD_Undef, MOPD_Undef, MOPD_Undef}, ISLOAD, "movss", "1,0")
//MOP_ldsd,
DEFINE_MOP(MOP_ldsd, {MOPD_Reg64FD, MOPD_Mem64S, MOPD_Undef, MOPD_Undef, MOPD_Undef}, ISLOAD, "movsd", "1,0")
//MOP_st8,
DEFINE_MOP(MOP_st8, {MOPD_Reg8IS, MOPD_Mem, MOPD_Undef, MOPD_Undef, MOPD_Undef}, ISSTORE, "movb", "0,1")
//MOP_st16,
DEFINE_MOP(MOP_st16, {MOPD_Reg16IS, MOPD_Mem, MOPD_Undef, MOPD_Undef, MOPD_Undef}, ISSTORE, "movw", "0,1")
//MOP_st32,
DEFINE_MOP(MOP_st32, {MOPD_Reg32IS, MOPD_Mem32S, MOPD_Undef, MOPD_Undef, MOPD_Undef}, ISSTORE, "movl", "0,1")
//MOP_st64,
DEFINE_MOP(MOP_st64, {MOPD_Reg64IS, MOPD_Mem64S, MOPD_Undef, MOPD_Undef, MOPD_Undef}, ISSTORE, "movq", "0,1")
//MOP_stss,
DEFINE_MOP(MOP_stss, {MOPD_Reg32FS, MOPD_Mem32S, MOPD_Undef, MOPD_Undef, MOPD_Undef}, ISSTORE, "movss", "0,1")
//MOP_stsd,
DEFINE_MOP(MOP_stsd, {MOPD_Reg64FS, MOPD_Mem64S, MOPD_Undef, MOPD_Undef, MOPD_Undef}, ISSTORE, "movsd", "0,1")
//MOP_lea32,
DEFINE_MOP(MOP_lea32, {MOPD_Reg32ID, MOPD_Mem32S, MOPD_Undef, MOPD_Undef, MOPD_Undef}, 0, "leal", "1,0")
//MOP_lea64,
DEFINE_MOP(MOP_lea64, {MOPD_Reg64ID, MOPD_Mem64S, MOPD_Undef, MOPD_Undef, MOPD_Undef}, 0, "leaq", "1,0")
//MOP_ldc32,
DEFINE_MOP(MOP_ldc32, {MOPD_Reg32ID, MOPD_Imm32, MOPD_Undef, MOPD_Undef, MOPD_Undef}, 0, "movl", "1,0")
//MOP_ldc64,
DEFINE_MOP(MOP_ldc64, {MOPD_Reg64ID, MOPD_Imm64, MOPD_Undef, MOPD_Undef, MOPD_Undef}, 0, "movq", "1,0")
//MOP_ldc32abs,
DEFINE_MOP(MOP_ldc32abs, {MOPD_Reg32ID, MOPD_Imm32, MOPD_Undef, MOPD_Undef, MOPD_Undef}, 0, "movabsl", "1,0")
//MOP_ldc64abs,
DEFINE_MOP(MOP_ldc64abs, {MOPD_Reg64ID, MOPD_Imm64, MOPD_Undef, MOPD_Undef, MOPD_Undef}, 0, "movabsq", "1,0")
//MOP_mov32,
DEFINE_MOP(MOP_mov32, {MOPD_Reg32ID, MOPD_Reg32IS, MOPD_Undef, MOPD_Undef, MOPD_Undef}, 0, "movl", "1,0")
//MOP_mov64,
DEFINE_MOP(MOP_mov64, {MOPD_Reg64ID, MOPD_Reg64IS, MOPD_Undef, MOPD_Undef, MOPD_Undef}, 0, "movq", "1,0")
//MOP_movabs32,
DEFINE_MOP(MOP_movabs32, {MOPD_Reg32ID, MOPD_Reg32IS, MOPD_Undef, MOPD_Undef, MOPD_Undef}, 0, "movabsl", "1,0")
//MOP_movabs64,
DEFINE_MOP(MOP_movabs64, {MOPD_Reg64ID, MOPD_Reg64IS, MOPD_Undef, MOPD_Undef, MOPD_Undef}, 0, "movabsq", "1,0")
//MOP_movss,
DEFINE_MOP(MOP_movss, {MOPD_Reg32FD, MOPD_Reg32FS, MOPD_Undef, MOPD_Undef, MOPD_Undef}, 0, "movss", "1,0")
//MOP_movsd,
DEFINE_MOP(MOP_movsd, {MOPD_Reg64FD, MOPD_Reg64FS, MOPD_Undef, MOPD_Undef, MOPD_Undef}, 0, "movsd", "1,0")
//MOP_movsbl,
DEFINE_MOP(MOP_movsbl, {MOPD_Reg32ID, MOPD_Reg, MOPD_Undef, MOPD_Undef, MOPD_Undef}, 0, "movsbl", "1,0")
//MOP_movzbl,
DEFINE_MOP(MOP_movzbl, {MOPD_Reg32ID, MOPD_Reg, MOPD_Undef, MOPD_Undef, MOPD_Undef}, 0, "movzbl", "1,0")
//MOP_movswl,
DEFINE_MOP(MOP_movswl, {MOPD_Reg32ID, MOPD_Reg, MOPD_Undef, MOPD_Undef, MOPD_Undef}, 0, "movswl", "1,0")
//MOP_movzwl,
DEFINE_MOP(MOP_movzwl, {MOPD_Reg32ID, MOPD_Reg, MOPD_Undef, MOPD_Undef, MOPD_Undef}, 0, "movzwl", "1,0")
//MOP_movsbq,
DEFINE_MOP(MOP_movsbq, {MOPD_Reg64ID, MOPD_Reg, MOPD_Undef, MOPD_Undef, MOPD_Undef}, 0, "movsbq", "1,0")
//MOP_movzbq,
DEFINE_MOP(MOP_movzbq, {MOPD_Reg64ID, MOPD_Reg, MOPD_Undef, MOPD_Undef, MOPD_Undef}, 0, "movzbq", "1,0")
//MOP_movswq,
DEFINE_MOP(MOP_movswq, {MOPD_Reg64ID, MOPD_Reg, MOPD_Undef, MOPD_Undef, MOPD_Undef}, 0, "movswq", "1,0")
//MOP_movzwq,
DEFINE_MOP(MOP_movzwq, {MOPD_Reg64ID, MOPD_Reg, MOPD_Undef, MOPD_Undef, MOPD_Undef}, 0, "movzwq", "1,0")
//MOP_movslq,
DEFINE_MOP(MOP_movslq, {MOPD_Reg64ID, MOPD_Reg32IS, MOPD_Undef, MOPD_Undef, MOPD_Undef}, 0, "movslq", "1,0")
//MOP_movzlq,
DEFINE_MOP(MOP_movzlq, {MOPD_Reg32ID, MOPD_Reg32IS, MOPD_Undef, MOPD_Undef, MOPD_Undef}, 0, "movl", "1,0")
//MOP_movzql,  // trunc
DEFINE_MOP(MOP_movzql, {MOPD_Reg32ID, MOPD_Reg32IS, MOPD_Undef, MOPD_Undef, MOPD_Undef}, 0, "movl", "1,0")
//MOP_movi2fd,  // for bit cast int to float
DEFINE_MOP(MOP_movi2fd, {MOPD_Reg32FD, MOPD_Reg32IS, MOPD_Undef, MOPD_Undef, MOPD_Undef}, 0, "movd", "1,0")
//MOP_movi2fq,
DEFINE_MOP(MOP_movi2fq, {MOPD_Reg64FD, MOPD_Reg64IS, MOPD_Undef, MOPD_Undef, MOPD_Undef}, 0, "movq", "1,0")
//MOP_movf2id,  // for bit cast float to int
DEFINE_MOP(MOP_movf2id, {MOPD_Reg32ID, MOPD_Reg32FS, MOPD_Undef, MOPD_Undef, MOPD_Undef}, 0, "movd", "1,0")
//MOP_movf2iq,
DEFINE_MOP(MOP_movf2iq, {MOPD_Reg64ID, MOPD_Reg64FS, MOPD_Undef, MOPD_Undef, MOPD_Undef}, 0, "movq", "1,0")
//MOP_ldsbl,
DEFINE_MOP(MOP_ldsbl, {MOPD_Reg32ID, MOPD_Mem, MOPD_Undef, MOPD_Undef, MOPD_Undef}, ISLOAD, "movsbl", "1,0")
//MOP_ldzbl,
DEFINE_MOP(MOP_ldzbl, {MOPD_Reg32ID, MOPD_Mem, MOPD_Undef, MOPD_Undef, MOPD_Undef}, ISLOAD, "movzbl", "1,0")
//MOP_ldswl,
DEFINE_MOP(MOP_ldswl, {MOPD_Reg32ID, MOPD_Mem, MOPD_Undef, MOPD_Undef, MOPD_Undef}, ISLOAD, "movswl", "1,0")
//MOP_ldzwl,
DEFINE_MOP(MOP_ldzwl, {MOPD_Reg32ID, MOPD_Mem, MOPD_Undef, MOPD_Undef, MOPD_Undef}, ISLOAD, "movzwl", "1,0")
//MOP_ldsbq,
DEFINE_MOP(MOP_ldsbq, {MOPD_Reg64ID, MOPD_Mem, MOPD_Undef, MOPD_Undef, MOPD_Undef}, ISLOAD, "movsbq", "1,0")
//MOP_ldzbq,
DEFINE_MOP(MOP_ldzbq, {MOPD_Reg64ID, MOPD_Mem, MOPD_Undef, MOPD_Undef, MOPD_Undef}, ISLOAD, "movzbq", "1,0")
//MOP_ldswq,
DEFINE_MOP(MOP_ldswq, {MOPD_Reg64ID, MOPD_Mem, MOPD_Undef, MOPD_Undef, MOPD_Undef}, ISLOAD, "movswq", "1,0")
//MOP_ldzwq,
DEFINE_MOP(MOP_ldzwq, {MOPD_Reg64ID, MOPD_Mem, MOPD_Undef, MOPD_Undef, MOPD_Undef}, ISLOAD, "movzwq", "1,0")
//MOP_ldslq,
DEFINE_MOP(MOP_ldslq, {MOPD_Reg64ID, MOPD_Mem, MOPD_Undef, MOPD_Undef, MOPD_Undef}, ISLOAD, "movslq", "1,0")
//MOP_ldzlq, // x86-64 is default by zero extended, so this is actually movl
DEFINE_MOP(MOP_ldzlq, {MOPD_Reg32ID, MOPD_Mem, MOPD_Undef, MOPD_Undef, MOPD_Undef}, ISLOAD, "movl", "1,0")
//MOP_ldi2fd,
DEFINE_MOP(MOP_ldi2fd, {MOPD_Reg32FD, MOPD_Mem32S, MOPD_Undef, MOPD_Undef, MOPD_Undef}, ISLOAD, "movd", "1,0")
//MOP_ldi2fq,
DEFINE_MOP(MOP_ldi2fq, {MOPD_Reg64FD, MOPD_Mem64S, MOPD_Undef, MOPD_Undef, MOPD_Undef}, ISLOAD, "movq", "1,0")
 //MOP_ldf2id,
DEFINE_MOP(MOP_ldf2id, {MOPD_Reg32ID, MOPD_Mem32S, MOPD_Undef, MOPD_Undef, MOPD_Undef}, ISLOAD, "movd", "1,0")
//MOP_ldf2iq,
DEFINE_MOP(MOP_ldf2iq, {MOPD_Reg64ID, MOPD_Mem64S, MOPD_Undef, MOPD_Undef, MOPD_Undef}, ISLOAD, "movq", "1,0")
//MOP_popl,
DEFINE_MOP(MOP_popl, {MOPD_Reg32ID, MOPD_Reg, MOPD_Reg, MOPD_Undef, MOPD_Undef}, 0, "popl", "0")
//MOP_popq,
DEFINE_MOP(MOP_popq, {MOPD_Reg64ID, MOPD_Reg64IS, MOPD_Reg64IS, MOPD_Undef, MOPD_Undef}, 0, "popq", "0")
//MOP_pushl,
DEFINE_MOP(MOP_pushl, {MOPD_Reg32ID, MOPD_Reg32IS, MOPD_Reg32IS, MOPD_Undef, MOPD_Undef}, 0, "pushl", "0")
//MOP_pushq,
DEFINE_MOP(MOP_pushq, {MOPD_Reg64ID, MOPD_Reg64IS, MOPD_Reg64IS, MOPD_Undef, MOPD_Undef}, 0, "pushq", "1")
//MOP_cvtss2sdr,
DEFINE_MOP(MOP_cvtss2sdr, {MOPD_Reg64FD, MOPD_Reg32FS, MOPD_Undef, MOPD_Undef, MOPD_Undef}, 0, "cvtss2sd", "1,0")
//MOP_cvtss2sdm,
DEFINE_MOP(MOP_cvtss2sdm, {MOPD_Reg64FD, MOPD_Mem32S, MOPD_Undef, MOPD_Undef, MOPD_Undef}, 0, "cvtss2sd", "1,0")
//MOP_cvtsd2ssr,
DEFINE_MOP(MOP_cvtsd2ssr, {MOPD_Reg32FD, MOPD_Reg64FS, MOPD_Undef, MOPD_Undef, MOPD_Undef}, 0, "cvtsd2ss", "1,0")
//MOP_cvtsd2ssm,
DEFINE_MOP(MOP_cvtsd2ssm, {MOPD_Reg32FD, MOPD_Mem32S, MOPD_Undef, MOPD_Undef, MOPD_Undef}, 0, "cvtsd2ss", "1,0")
//MOP_cvtsi2sdr,
DEFINE_MOP(MOP_cvtsi2sdr, {MOPD_Reg64FD, MOPD_Reg32IS, MOPD_Undef, MOPD_Undef, MOPD_Undef}, 0, "cvtsi2sdl", "1,0")
//MOP_cvtsi2sdm,
DEFINE_MOP(MOP_cvtsi2sdm, {MOPD_Reg64FD, MOPD_Mem32S, MOPD_Undef, MOPD_Undef, MOPD_Undef}, 0, "cvtsi2sdl", "1,0")
//MOP_cvtsi2ssr,
DEFINE_MOP(MOP_cvtsi2ssr, {MOPD_Reg32FD, MOPD_Reg32IS, MOPD_Undef, MOPD_Undef, MOPD_Undef}, 0, "cvtsi2ssl", "1,0")
//MOP_cvtsi2ssm,
DEFINE_MOP(MOP_cvtsi2ssm, {MOPD_Reg32FD, MOPD_Mem32S, MOPD_Undef, MOPD_Undef, MOPD_Undef}, 0, "cvtsi2ssl", "1,0")
//MOP_cvtsi2sdqr,
DEFINE_MOP(MOP_cvtsi2sdqr, {MOPD_Reg64FD, MOPD_Reg64IS, MOPD_Undef, MOPD_Undef, MOPD_Undef}, 0, "cvtsi2sdq", "1,0")
//MOP_cvtsi2sdqm,
DEFINE_MOP(MOP_cvtsi2sdqm, {MOPD_Reg64FD, MOPD_Mem64S, MOPD_Undef, MOPD_Undef, MOPD_Undef}, 0, "cvtsi2sdq", "1,0")
//MOP_cvtsi2ssqr,
DEFINE_MOP(MOP_cvtsi2ssqr, {MOPD_Reg32FD, MOPD_Reg64IS, MOPD_Undef, MOPD_Undef, MOPD_Undef}, 0, "cvtsi2ssq", "1,0")
//MOP_cvtsi2ssqm,
DEFINE_MOP(MOP_cvtsi2ssqm, {MOPD_Reg32FD, MOPD_Mem64S, MOPD_Undef, MOPD_Undef, MOPD_Undef}, 0, "cvtsi2ssq", "1,0")
//MOP_cvtss2sir,
DEFINE_MOP(MOP_cvtss2sir, {MOPD_Reg32ID, MOPD_Reg32FS, MOPD_Undef, MOPD_Undef, MOPD_Undef}, 0, "cvtss2si", "1,0")
//MOP_cvtss2sim,
DEFINE_MOP(MOP_cvtss2sim, {MOPD_Reg32ID, MOPD_Mem32S, MOPD_Undef, MOPD_Undef, MOPD_Undef}, 0, "cvtss2si", "1,0")
//MOP_cvtsd2sir,
DEFINE_MOP(MOP_cvtsd2sir, {MOPD_Reg32ID, MOPD_Reg64FS, MOPD_Undef, MOPD_Undef, MOPD_Undef}, 0, "cvtsd2si", "1,0")
//MOP_cvtsd2sim,
DEFINE_MOP(MOP_cvtsd2sim, {MOPD_Reg32ID, MOPD_Mem64S, MOPD_Undef, MOPD_Undef, MOPD_Undef}, 0, "cvtsd2si", "1,0")
//MOP_cvtss2siqr,
DEFINE_MOP(MOP_cvtss2siqr, {MOPD_Reg64ID, MOPD_Reg32FS, MOPD_Undef, MOPD_Undef, MOPD_Undef}, 0, "cvtss2siq", "1,0")
//MOP_cvtss2siqm,
DEFINE_MOP(MOP_cvtss2siqm, {MOPD_Reg64ID, MOPD_Mem32S, MOPD_Undef, MOPD_Undef, MOPD_Undef}, 0, "cvtss2siq", "1,0")
//MOP_cvtsd2siqr,
DEFINE_MOP(MOP_cvtsd2siqr, {MOPD_Reg64ID, MOPD_Reg64FS, MOPD_Undef, MOPD_Undef, MOPD_Undef}, 0, "cvtsd2siq", "1,0")
//MOP_cvtsd2siqm,
DEFINE_MOP(MOP_cvtsd2siqm, {MOPD_Reg64ID, MOPD_Mem64S, MOPD_Undef, MOPD_Undef, MOPD_Undef}, 0, "cvtsd2siq", "1,0")
//MOP_cvttss2sir,
DEFINE_MOP(MOP_cvttss2sir, {MOPD_Reg32ID, MOPD_Reg32FS, MOPD_Undef, MOPD_Undef, MOPD_Undef}, 0, "cvttss2si", "1,0")
//MOP_cvttss2sim,
DEFINE_MOP(MOP_cvttss2sim, {MOPD_Reg32ID, MOPD_Mem32S, MOPD_Undef, MOPD_Undef, MOPD_Undef}, 0, "cvttss2si", "1,0")
//MOP_cvttss2si64r,
DEFINE_MOP(MOP_cvttss2si64r, {MOPD_Reg64ID, MOPD_Reg32FS, MOPD_Undef, MOPD_Undef, MOPD_Undef}, 0, "cvttss2si", "1,0")
//MOP_cvttss2si64m,
DEFINE_MOP(MOP_cvttss2si64m, {MOPD_Reg64ID, MOPD_Mem32S, MOPD_Undef, MOPD_Undef, MOPD_Undef}, 0, "cvttss2si", "1,0")
//MOP_cvttsd2sir,
DEFINE_MOP(MOP_cvttsd2sir, {MOPD_Reg32ID, MOPD_Reg64FS, MOPD_Undef, MOPD_Undef, MOPD_Undef}, 0, "cvttsd2si", "1,0")
//MOP_cvttsd2sim,
DEFINE_MOP(MOP_cvttsd2sim, {MOPD_Reg32ID, MOPD_Mem64S, MOPD_Undef, MOPD_Undef, MOPD_Undef}, 0, "cvttsd2si", "1,0")
//MOP_cvttsd2si64r,
DEFINE_MOP(MOP_cvttsd2si64r, {MOPD_Reg64ID, MOPD_Reg64FS, MOPD_Undef, MOPD_Undef, MOPD_Undef}, 0, "cvttsd2si", "1,0")
//MOP_cvttsd2si64m,
DEFINE_MOP(MOP_cvttsd2si64m, {MOPD_Reg64ID, MOPD_Mem64S, MOPD_Undef, MOPD_Undef, MOPD_Undef}, 0, "cvttsd2si", "1,0")
//MOP_cvttss2siqr,
DEFINE_MOP(MOP_cvttss2siqr, {MOPD_Reg64ID, MOPD_Reg32FS, MOPD_Undef, MOPD_Undef, MOPD_Undef}, 0, "cvttss2siq", "1,0")
//MOP_cvttss2siqm,
DEFINE_MOP(MOP_cvttss2siqm, {MOPD_Reg64ID, MOPD_Mem32S, MOPD_Undef, MOPD_Undef, MOPD_Undef}, 0, "cvttss2siq", "1,0")
//MOP_cvttsd2siqr,
DEFINE_MOP(MOP_cvttsd2siqr, {MOPD_Reg64ID, MOPD_Reg64FS, MOPD_Undef, MOPD_Undef, MOPD_Undef}, 0, "cvttsd2siq", "1,0")
//MOP_cvttsd2siqm,
DEFINE_MOP(MOP_cvttsd2siqm, {MOPD_Reg64ID, MOPD_Mem64S, MOPD_Undef, MOPD_Undef, MOPD_Undef}, 0, "cvttsd2siq", "1,0")
// mis
//MOP_cltd,
//MOP_cqto,
// MOP_zero32i
DEFINE_MOP(MOP_zero32i, {MOPD_Reg32ID, MOPD_Undef, MOPD_Undef, MOPD_Undef, MOPD_Undef}, 0, "xor", "0,0")
// MOP_zero32f
DEFINE_MOP(MOP_zero32f, {MOPD_Reg32FD, MOPD_Undef, MOPD_Undef, MOPD_Undef, MOPD_Undef}, 0, "xorps", "0,0")
// MOP_zero64f
DEFINE_MOP(MOP_zero64f, {MOPD_Reg64FD, MOPD_Undef, MOPD_Undef, MOPD_Undef, MOPD_Undef}, 0, "xorpd", "0,0")
