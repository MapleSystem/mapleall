/*
 * Copyright (c) [2020] Huawei Technologies Co., Ltd. All rights reserved.
 *
 * OpenArkCompiler is licensed under the Mulan Permissive Software License v2.
 * You can use this software according to the terms and conditions of the MulanPSL - 2.0.
 * You may obtain a copy of MulanPSL - 2.0 at:
 *
 *   https://opensource.org/licenses/MulanPSL-2.0
 *
 * THIS SOFTWARE IS PROVIDED ON AN "AS IS" BASIS, WITHOUT WARRANTIES OF ANY KIND, EITHER
 * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO NON-INFRINGEMENT, MERCHANTABILITY OR
 * FIT FOR A PARTICULAR PURPOSE.
 * See the MulanPSL - 2.0 for more details.
 */

// (id, name, probability)

// A value used as final outcome of all heuristics.
DEF_PREDICTOR (kPredCombined, "combined", PROB_ALWAYS)

// No heuristic applying.
DEF_PREDICTOR (kPredNoPrediction, "no prediction", PROB_ALWAYS)

// Branch causing function to terminate is probably not taken.
DEF_PREDICTOR (kPredEarlyReturn, "early return", HITRATE (66))

// Edge causing loop to terminate is probably not taken.
DEF_PREDICTOR (kPredLoopExit, "loop exit", HITRATE (89))

// Pointers are usually not NULL.
DEF_PREDICTOR (kPredPointer, "pointer", HITRATE (70))

// NE is probable, EQ not etc...
DEF_PREDICTOR (kPredOpcodePositive, "opcode values positive", HITRATE (59))
DEF_PREDICTOR (kPredOpcodeNonEqual, "opcode values nonequal", HITRATE (66))
DEF_PREDICTOR (kPredFPOpcode, "fp_opcode", HITRATE (90))

// Branch containing call is probably taken.
DEF_PREDICTOR (kPredCall, "call", HITRATE (67))

// Branch ending with return constant is probably not taken.
DEF_PREDICTOR (kPredConstReturn, "const return", HITRATE (65))

// Branch ending with return negative constant is probably not taken.
DEF_PREDICTOR (kPredNegativeReturn, "negative return", HITRATE (98))

// Branch ending with return null is probably not taken
DEF_PREDICTOR (kPredNullReturn, "null return", HITRATE (71))

// Java try fallthru is almost taken
DEF_PREDICTOR (kPredJavaTry, "javatry start label", HITRATE (98))
