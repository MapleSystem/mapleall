/*
 * Copyright (c) [2020] Huawei Technologies Co., Ltd. All rights reserved.
 *
 * OpenArkCompiler is licensed under the Mulan Permissive Software License v2.
 * You can use this software according to the terms and conditions of the MulanPSL - 2.0.
 * You may obtain a copy of MulanPSL - 2.0 at:
 *
 *   https://opensource.org/licenses/MulanPSL-2.0
 *
 * THIS SOFTWARE IS PROVIDED ON AN "AS IS" BASIS, WITHOUT WARRANTIES OF ANY KIND, EITHER
 * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO NON-INFRINGEMENT, MERCHANTABILITY OR
 * FIT FOR A PARTICULAR PURPOSE.
 * See the MulanPSL - 2.0 for more details.
 */

// {Index, mplname, do_simplify, nativename}
// inline,
//{kUknown, "", false, "", NULL},
#ifndef __OPENJDK__
{kStringCharAt, std::string(NameMangler::kJavaLangStringStr)+NameMangler::kNameSplitterStr+std::string("charAt_7C_28I_29C"), true, ""},
{kStringEquals, std::string(NameMangler::kJavaLangStringStr)+NameMangler::kNameSplitterStr+std::string("equals_7C_28")+NameMangler::kJavaLangObjectStr+std::string("_29Z"), true, ""},
{kStringGetChars, std::string(NameMangler::kJavaLangStringStr)+NameMangler::kNameSplitterStr+std::string("getChars_7C_28IIACI_29V"), true, ""},
#endif

// call native func directly.
{kObjectClone, std::string(NameMangler::kJavaLangObjectStr)+NameMangler::kNameSplitterStr+std::string("clone_7C_28_29")+NameMangler::kJavaLangObjectStr, false, std::string("Native_java_lang_Object_clone_Ljava_lang_Object__")},
#ifndef __OPENJDK__
{kStringCompareTo, std::string(NameMangler::kJavaLangStringStr)+NameMangler::kNameSplitterStr+std::string("compareTo_7C_28")+NameMangler::kJavaLangStringStr+std::string("_29I"), false, "Native_java_lang_String_compareTo__Ljava_lang_String_2"},
{kStringGetCharsNoCheck, std::string(NameMangler::kJavaLangStringStr)+NameMangler::kNameSplitterStr+"getCharsNoCheck_7C_28IIACI_29V", false, "Native_java_lang_String_getCharsNoCheck__II_3CI"},
{kStringNewStringFromChars, std::string(NameMangler::kJavaLangStringfactoryStr)+NameMangler::kNameSplitterStr+std::string("newStringFromChars_7C_28IIAC_29")+NameMangler::kJavaLangStringStr, false, "Native_java_lang_StringFactory_newStringFromChars__II_3C"},
{kStringNewStringFromBytes, std::string(NameMangler::kJavaLangStringfactoryStr)+NameMangler::kNameSplitterStr+std::string("newStringFromBytes_7C_28ABIII_29")+NameMangler::kJavaLangStringStr, false, "Native_java_lang_StringFactory_newStringFromBytes___3BIII"},
{kStringNewStringFromString, std::string(NameMangler::kJavaLangStringfactoryStr)+NameMangler::kNameSplitterStr+std::string("newStringFromString_7C_28")+NameMangler::kJavaLangStringStr+NameMangler::kRightBracketStr+NameMangler::kJavaLangStringStr, false, "Native_java_lang_StringFactory_newStringFromString__Ljava_lang_String_2"},
{kStringToCharArray, std::string(NameMangler::kJavaLangStringStr)+NameMangler::kNameSplitterStr+std::string("toCharArray_7C_28_29AC"), false, "Native_java_lang_String_toCharArray__"},
{kStringConcat, std::string(NameMangler::kJavaLangStringStr)+NameMangler::kNameSplitterStr+std::string("concat_7C_28")+NameMangler::kJavaLangStringStr+NameMangler::kRightBracketStr+NameMangler::kJavaLangStringStr, false, "Native_java_lang_String_concat__Ljava_lang_String_2"},
{kStringFastSubStr, std::string(NameMangler::kJavaLangStringStr)+NameMangler::kNameSplitterStr+std::string("fastSubstring_7C_28II_29")+NameMangler::kJavaLangStringStr, false, "Native_java_lang_String_fastSubstring__II"},
{kStringIntern, std::string(NameMangler::kJavaLangStringStr)+NameMangler::kNameSplitterStr+std::string("intern_7C_28_29")+NameMangler::kJavaLangStringStr, false, "Native_java_lang_String_intern__"},
{kStringDoReplace, std::string(NameMangler::kJavaLangStringStr)+NameMangler::kNameSplitterStr+std::string("doReplace_7C_28CC_29")+NameMangler::kJavaLangStringStr, false, "Native_java_lang_String_doReplace__CC"},
{kStringFastIndexOf, std::string(NameMangler::kJavaLangStringStr)+NameMangler::kNameSplitterStr+std::string("fastIndexOf_7C_28II_29I"), false, "Native_java_lang_String_fastIndexOf__II"},
#endif

{kThreadCurrentthread, std::string(NameMangler::kJavaLang)+"Thread_3B_7CcurrentThread_7C_28_29Ljava_2Flang_2FThread_3B", false, "Native_Thread_currentThread"},

{kObjectsRequireNonNull, NameMangler::kJavaUtil + std::string("Objects_3B_7CrequireNonNull_7C_28")+NameMangler::kJavaLangObjectStr+NameMangler::kRightBracketStr+NameMangler::kJavaLangObjectStr, true, ""},
